/*********************************************************************
  This is an example for our Monochrome OLEDs based on SH110X drivers

  This example is for a 128x64 size display using SPi to communicate
  5 pins are required to interface 

  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada  for Adafruit Industries.
  BSD license, check license.txt for more information
  All text above, and the splash screen must be included in any redistribution

  SPi SH1106 modified by Rupert Hirst  12/09/21
*********************************************************************/


/***************************************************************************************************
 La pantalla OLED utilizada en el proyecto utiliza los drivers del SH1106, NO LOS DEL SS1306. Estos son: https://github.com/adafruit/Adafruit_SH110x
 Para añadir imágenes: https://github.com/adafruit/Adafruit_SH110x
 Convertir imagenes a .bmp en blanco y negro. https://diyusthad.com/image2cpp
***************************************************************************************************/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>


#define OLED_MOSI     23 // (SDA (D1)) va al GPIO MOSI
#define OLED_CLK      18 // SCK GPIO
#define OLED_RST      17 // TX2 GPIO
#define OLED_DC       16 // RX2 GPIO
#define OLED_CS       5  // SS  GPIO


// Create the OLED display
Adafruit_SH1106G display = Adafruit_SH1106G(128, 64,OLED_MOSI, OLED_CLK, OLED_DC, OLED_RST, OLED_CS);


#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2


#define LOGO16_GLCD_HEIGHT 16
#define LOGO16_GLCD_WIDTH  16
static const unsigned char PROGMEM logo16_glcd_bmp[] =
{ B00000000, B11000000,
  B00000001, B11000000,
  B00000001, B11000000,
  B00000011, B11100000,
  B11110011, B11100000,
  B11111110, B11111000,
  B01111110, B11111111,
  B00110011, B10011111,
  B00011111, B11111100,
  B00001101, B01110000,
  B00011011, B10100000,
  B00111111, B11100000,
  B00111111, B11110000,
  B01111100, B11110000,
  B01110000, B01110000,
  B00000000, B00110000
};

const unsigned char griff [] PROGMEM = {
	// 'Griffith-stare, 128x64px
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xc1, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0x80, 0x23, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfe, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0xff, 0xe0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xef, 0x77, 0xb7, 0xfe, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0xff, 0xc0, 0x00, 0x00, 0x1d, 0xff, 0xff, 0xff, 0x7f, 0xb7, 0xfe, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0xff, 0x00, 0x00, 0x06, 0x3f, 0xfd, 0xff, 0xfb, 0xff, 0xb7, 0xfe, 0xfb, 0xe0, 0x00, 0x00, 0x00, 
	0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xcd, 0x7f, 0xbf, 0xfe, 0x7b, 0xe0, 0x00, 0x00, 0x00, 
	0x70, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc1, 0xe7, 0xbb, 0xcc, 0x5b, 0xe0, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x38, 0x19, 0x8b, 0xcd, 0x5b, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xff, 0xfe, 0xff, 0x38, 0x45, 0x81, 0xc8, 0x13, 0x7f, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xff, 0xff, 0xfe, 0xff, 0x19, 0xf1, 0xf8, 0x89, 0x97, 0xff, 0xff, 0xc0, 0x00, 
	0x00, 0x00, 0x03, 0xff, 0xff, 0xfe, 0xf7, 0x9f, 0x32, 0xf9, 0x80, 0x07, 0xff, 0xff, 0xfc, 0x00, 
	0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfb, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x00, 
	0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0xfc, 0xbf, 0xff, 0xfc, 0x06, 0x05, 0xff, 0xff, 0xfe, 0xe0, 
	0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc, 0xdf, 0xff, 0xfc, 0x07, 0x01, 0xff, 0xff, 0xff, 0xe0, 
	0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xfc, 0x03, 0x03, 0xff, 0xff, 0xff, 0xc0, 
	0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x60, 0x37, 0xff, 0xff, 0xff, 0xc0, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x70, 0x07, 0xff, 0xff, 0xfe, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x30, 0x07, 0xff, 0xff, 0xfe, 0x00, 
	0x00, 0x04, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x30, 0x0f, 0xff, 0xff, 0xfe, 0x00, 
	0x00, 0x07, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x00, 
	0x00, 0x07, 0xff, 0xff, 0xff, 0xfd, 0xfd, 0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x80, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xfe, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xfe, 0x7c, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xf7, 0xfb, 0xff, 0xff, 0xf8, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xf7, 0xf1, 0xff, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x80, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 
	0x00, 0x02, 0x1f, 0xff, 0xff, 0xbf, 0xf2, 0x7f, 0xf0, 0xe0, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 
	0x03, 0x01, 0xff, 0xf8, 0xf1, 0xaf, 0xf0, 0x3f, 0xff, 0x40, 0x00, 0x0f, 0xff, 0x40, 0x00, 0x00, 
	0x0f, 0x01, 0xff, 0xff, 0xff, 0xef, 0xf0, 0x1f, 0xff, 0xc0, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 
	0x0f, 0x99, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xf0, 0x00, 0x01, 0x9f, 0xc0, 0x00, 0x00, 0x01, 
	0x06, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x07, 0xf8, 0x00, 0x01, 0x9f, 0x00, 0x00, 0x00, 0x07, 
	0x06, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xfe, 0x00, 0x01, 0x9f, 0x80, 0x00, 0x00, 0x0f, 
	0x02, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xff, 0x00, 0x03, 0xbf, 0x80, 0x00, 0x00, 0x0f, 
	0x00, 0x3b, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0x00, 0x43, 0xbf, 0x00, 0x00, 0x00, 0x1f, 
	0x02, 0x27, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0x00, 0xc7, 0xbf, 0x00, 0x00, 0x00, 0xff, 
	0x03, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x07, 0xbe, 0x00, 0x00, 0x00, 0xff, 
	0x01, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x07, 0xbc, 0x00, 0x00, 0x01, 0xff, 
	0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x0f, 0xbc, 0x00, 0x00, 0x01, 0xff, 
	0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x0f, 0xbe, 0x00, 0x00, 0x01, 0xff, 
	0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0x9e, 0x00, 0x10, 0x00, 0xff, 
	0x00, 0x18, 0x00, 0x7e, 0x7f, 0xff, 0xff, 0x60, 0x00, 0xc0, 0x0f, 0x8f, 0xe4, 0x30, 0x00, 0xff, 
	0x00, 0x01, 0xfe, 0x03, 0xcf, 0xff, 0xff, 0x66, 0x00, 0x90, 0x0f, 0x8f, 0xf4, 0x20, 0x00, 0xff, 
	0x00, 0x3f, 0xff, 0xf8, 0x3c, 0xff, 0xff, 0xa7, 0xc0, 0x18, 0x0f, 0xcf, 0xe7, 0xc0, 0x00, 0x7f, 
	0x03, 0xff, 0xff, 0xff, 0x0f, 0x3f, 0xff, 0xb7, 0xee, 0x1e, 0x0f, 0xcf, 0xff, 0xd8, 0x01, 0xff, 
	0x0f, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xc3, 0xff, 0xde, 0x0f, 0xd7, 0xfd, 0xb8, 0x03, 0xff, 
	0x3f, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xc3, 0xfd, 0xff, 0x0f, 0xdb, 0xf1, 0x20, 0x01, 0xff
};

const unsigned char griff2 [] PROGMEM = {
	0x0c, 0x01, 0xe0, 0x00, 0x0c, 0x70, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0xf8, 
	0x00, 0x03, 0xe0, 0x00, 0x00, 0x70, 0x7f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0xff, 
	0x03, 0x03, 0x70, 0x08, 0x00, 0x20, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
	0x07, 0x00, 0x70, 0x02, 0x00, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
	0x07, 0x00, 0x70, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
	0x07, 0xc0, 0xe0, 0x00, 0x20, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0x0f, 0xc3, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0x3f, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x60, 0x0f, 0xff, 0xff, 
	0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x30, 0x0f, 0xff, 0xff, 
	0x03, 0x80, 0x20, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x02, 0x38, 0x1f, 0xff, 0xff, 
	0x03, 0x80, 0x30, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x01, 0x9c, 0x1f, 0xff, 0xff, 
	0x03, 0x80, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0xde, 0x1f, 0xff, 0xff, 
	0x03, 0xdc, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xbf, 0x60, 0x00, 0x00, 0xfe, 0x0f, 0xff, 0xff, 
	0x0f, 0xf7, 0xf8, 0x00, 0x00, 0x00, 0x03, 0x7f, 0x5b, 0x70, 0x00, 0x20, 0x7f, 0x0f, 0xff, 0xff, 
	0x0f, 0xe7, 0xfb, 0xc0, 0x00, 0x00, 0x00, 0xff, 0x4f, 0xf0, 0x00, 0x18, 0x7f, 0x0f, 0xff, 0xff, 
	0xe7, 0xe0, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x7e, 0xc1, 0x60, 0x00, 0x0e, 0x7f, 0x8f, 0xff, 0xff, 
	0xf7, 0xe0, 0x06, 0x80, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x40, 0x00, 0x0f, 0xff, 0x8f, 0xff, 0xff, 
	0xff, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x24, 0x10, 0xc0, 0x00, 0x1f, 0xff, 0x2f, 0xff, 0xff, 
	0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x18, 0x2c, 0xeb, 0x20, 0x00, 0x1f, 0xff, 0x3f, 0xff, 0xff, 
	0x3b, 0xc0, 0x00, 0x0c, 0x00, 0x01, 0x03, 0x1d, 0xf5, 0xe0, 0x00, 0x1f, 0xff, 0x3f, 0xff, 0xff, 
	0x3b, 0x80, 0x00, 0x1f, 0x00, 0x01, 0xdf, 0x1f, 0xf5, 0xe0, 0x00, 0x3f, 0xfe, 0xbf, 0xff, 0xff, 
	0x7f, 0x80, 0x00, 0x03, 0x00, 0x00, 0xee, 0x1f, 0xfd, 0xe0, 0x00, 0x3f, 0xfe, 0x7f, 0xff, 0xff, 
	0xff, 0x00, 0x00, 0x10, 0x00, 0x00, 0xe4, 0x1b, 0xed, 0xf0, 0x00, 0xff, 0xfe, 0x3f, 0xff, 0xff, 
	0xe0, 0x00, 0x00, 0x3f, 0x80, 0x00, 0xe0, 0x1f, 0xff, 0xdc, 0x20, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 
	0xe0, 0x00, 0x00, 0x0f, 0x80, 0x00, 0xe0, 0x1f, 0xe6, 0xdc, 0x1f, 0xff, 0xff, 0xbf, 0xff, 0xff, 
	0xf9, 0x00, 0x00, 0x03, 0xe0, 0x00, 0xe0, 0x07, 0xe6, 0xfc, 0x07, 0xff, 0xfd, 0xff, 0xff, 0xff, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0f, 0xc6, 0x7f, 0x03, 0xff, 0xfd, 0xff, 0xff, 0xff, 
	0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1f, 0x84, 0x7f, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 
	0x7c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x80, 0x0e, 0x20, 0x78, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 
	0xfc, 0x00, 0x00, 0x00, 0x10, 0x02, 0xc0, 0x0e, 0x0c, 0x70, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x1f, 0x00, 0x7f, 0xff, 0xff, 0xf2, 0x7f, 0xff, 0xff, 
	0xfc, 0x00, 0x00, 0x00, 0x10, 0x03, 0x60, 0x17, 0xe0, 0x7f, 0xff, 0xff, 0xf6, 0xff, 0xff, 0xff, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x0f, 0xe0, 0xbf, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 
	0x7f, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf9, 0xdf, 0xc0, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xc7, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 
	0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xb3, 0xe8, 0x6f, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 
	0x07, 0xe0, 0x00, 0x20, 0x00, 0x00, 0x1f, 0x8f, 0xf0, 0x6f, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 
	0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xdf, 0xf0, 0x77, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 
	0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xdd, 0xf0, 0xf3, 0x07, 0xff, 0xf7, 0xff, 0xff, 0xff, 
	0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x6f, 0xf0, 0xf9, 0x83, 0xff, 0xef, 0xff, 0xff, 0xff, 
	0x07, 0xf0, 0x00, 0x40, 0x00, 0x00, 0x01, 0xaf, 0xf9, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x84, 0xb9, 0xf0, 0x00, 0x7e, 0x4f, 0xff, 0xff, 0xff, 
	0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x82, 0xfb, 0xe0, 0x00, 0x3c, 0x0f, 0xff, 0xff, 0xff, 
	0x07, 0xe0, 0x02, 0x00, 0x00, 0x00, 0x01, 0x9b, 0x7b, 0xc0, 0x00, 0x30, 0x9f, 0xff, 0xff, 0xff, 
	0x3f, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0xfb, 0xf9, 0x50, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
	0x80, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0xfd, 0xf8, 0xfe, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x03, 0x7d, 0xfc, 0x7f, 0xc0, 0x32, 0xff, 0xff, 0xff, 0xff, 
	0x80, 0x00, 0x38, 0x00, 0x00, 0x00, 0x07, 0xef, 0xfe, 0x27, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 
	0xc0, 0x00, 0x78, 0x00, 0x00, 0x00, 0x07, 0x6f, 0xfe, 0xbf, 0xf0, 0x41, 0xff, 0xff, 0xff, 0xff, 
	0xc0, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xef, 0xbf, 0xdf, 0xf0, 0x81, 0xff, 0xff, 0xff, 0xff, 
	0xc0, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x07, 0x8e, 0xbf, 0xdf, 0xf1, 0x01, 0xff, 0xff, 0xff, 0xff, 
	0xc0, 0x07, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff, 0xbf, 0x0f, 0xf2, 0x03, 0xff, 0xff, 0xff, 0xff, 
	0x80, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xf7, 0x7f, 0x5f, 0xf6, 0x07, 0xff, 0xff, 0xff, 0xff, 
	0xc0, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x17, 0xff, 0xff, 0xee, 0x0f, 0xff, 0xff, 0xff, 0xff, 
	0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xcf, 0xff, 0xff, 0xdc, 0x1f, 0xff, 0xff, 0xff, 0xff, 
	0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xef, 0xff, 0xff, 0x98, 0x1e, 0x7f, 0xff, 0xff, 0xff, 
	0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xef, 0xff, 0x7e, 0x00, 0x3c, 0x7f, 0xff, 0xff, 0xff, 
	0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xdf, 0xff, 0x7c, 0x00, 0x79, 0x4c, 0xff, 0xff, 0xff, 
	0x00, 0x0f, 0xfe, 0x00, 0x00, 0x30, 0x03, 0xff, 0x7f, 0x78, 0x07, 0xf1, 0x00, 0xff, 0xff, 0xff, 
	0x00, 0x0f, 0xfe, 0x00, 0x01, 0x01, 0x00, 0xbf, 0x47, 0x60, 0x1f, 0xe0, 0x00, 0x1f, 0xff, 0xff, 
	0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x1c, 0x7f, 0x27, 0x40, 0x3f, 0x88, 0x00, 0x1f, 0xff, 0xff, 
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x01, 0xfe, 0xfd, 0xff, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0x00, 0x00, 0x02, 0x20, 0x00, 0x1f, 0x3f, 0xff, 0xfc, 0x04, 0x3e, 0x00, 0x00, 0x3f, 0xff, 0xff
};

const unsigned char mark [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87, 0xe1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x83, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x03, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x03, 0xe0, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x03, 0xe0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x03, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x03, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x03, 0xe0, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x03, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc1, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc3, 0xc3, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf3, 0xc7, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xcf, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xdf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfb, 0xc7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf3, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe1, 0xc1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc1, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x81, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x01, 0xe0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x01, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x01, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x01, 0xe0, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x01, 0xc0, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x03, 0xc0, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x03, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x81, 0xe1, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x81, 0xc3, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe1, 0xc7, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe1, 0xcf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf9, 0xdf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};





void setup()   {
  Serial.begin(9600);

  //display.setContrast (0); // dim display

  // Start OLED
  display.begin(0, true); // we dont use the i2c address but we will reset!


  // Show image buffer on the display hardware.
  // Since the buffer is intialized with an Adafruit splashscreen
  // internally, this will display the splashscreen.
  display.display();
  delay(2000);

  // Clear the buffer.
  display.clearDisplay();

  // griffith bitmap display
  display.drawBitmap(0, 0,  griff, 128, 64, 1);
  display.display();
  delay(2000);
  display.clearDisplay();

  // griffith2 bitmap display
  display.drawBitmap(0, 0,  griff2, 128, 64, 1);
  display.display();
  delay(2000);
  display.clearDisplay();

  // mark bitmap display
  display.drawBitmap(0, 0,  mark, 128, 64, 1);
  display.display();
  //delay(2000);
  display.clearDisplay();

  // text display
  /**display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);
  display.setCursor(0, 0);
  display.println("Fuiste marcado para  el eclipse.");
  display.println("Ahora, preparate para morir");
  display.display();
  **/

}


void loop() {

}

/***
void testdrawbitmap(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  uint8_t icons[NUMFLAKES][3];

  // initialize
  for (uint8_t f = 0; f < NUMFLAKES; f++) {
    icons[f][XPOS] = random(display.width());
    icons[f][YPOS] = 0;
    icons[f][DELTAY] = random(5) + 1;

    Serial.print("x: ");
    Serial.print(icons[f][XPOS], DEC);
    Serial.print(" y: ");
    Serial.print(icons[f][YPOS], DEC);
    Serial.print(" dy: ");
    Serial.println(icons[f][DELTAY], DEC);
  }

  while (1) {
    // draw each icon
    for (uint8_t f = 0; f < NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, SH110X_WHITE);
    }
    display.display();
    delay(200);

    // then erase it + move it
    for (uint8_t f = 0; f < NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, SH110X_BLACK);
      // move it
      icons[f][YPOS] += icons[f][DELTAY];
      // if its gone, reinit
      if (icons[f][YPOS] > display.height()) {
        icons[f][XPOS] = random(display.width());
        icons[f][YPOS] = 0;
        icons[f][DELTAY] = random(5) + 1;
      }
    }
  }
}


void testdrawchar(void) {
  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);
  display.setCursor(0, 0);

  for (uint8_t i = 0; i < 168; i++) {
    if (i == '\n') continue;
    display.write(i);
    if ((i > 0) && (i % 21 == 0))
      display.println();
  }
  display.display();
  delay(1);
}

void testdrawcircle(void) {
  for (int16_t i = 0; i < display.height(); i += 2) {
    display.drawCircle(display.width() / 2, display.height() / 2, i, SH110X_WHITE);
    display.display();
    delay(1);
  }
}

void testfillrect(void) {
  uint8_t color = 1;
  for (int16_t i = 0; i < display.height() / 2; i += 3) {
    // alternate colors
    display.fillRect(i, i, display.width() - i * 2, display.height() - i * 2, color % 2);
    display.display();
    delay(1);
    color++;
  }
}

void testdrawtriangle(void) {
  for (int16_t i = 0; i < min(display.width(), display.height()) / 2; i += 5) {
    display.drawTriangle(display.width() / 2, display.height() / 2 - i,
                         display.width() / 2 - i, display.height() / 2 + i,
                         display.width() / 2 + i, display.height() / 2 + i, SH110X_WHITE);
    display.display();
    delay(1);
  }
}

void testfilltriangle(void) {
  uint8_t color = SH110X_WHITE;
  for (int16_t i = min(display.width(), display.height()) / 2; i > 0; i -= 5) {
    display.fillTriangle(display.width() / 2, display.height() / 2 - i,
                         display.width() / 2 - i, display.height() / 2 + i,
                         display.width() / 2 + i, display.height() / 2 + i, SH110X_WHITE);
    if (color == SH110X_WHITE) color = SH110X_BLACK;
    else color = SH110X_WHITE;
    display.display();
    delay(1);
  }
}

void testdrawroundrect(void) {
  for (int16_t i = 0; i < display.height() / 2 - 2; i += 2) {
    display.drawRoundRect(i, i, display.width() - 2 * i, display.height() - 2 * i, display.height() / 4, SH110X_WHITE);
    display.display();
    delay(1);
  }
}

void testfillroundrect(void) {
  uint8_t color = SH110X_WHITE;
  for (int16_t i = 0; i < display.height() / 2 - 2; i += 2) {
    display.fillRoundRect(i, i, display.width() - 2 * i, display.height() - 2 * i, display.height() / 4, color);
    if (color == SH110X_WHITE) color = SH110X_BLACK;
    else color = SH110X_WHITE;
    display.display();
    delay(1);
  }
}

void testdrawrect(void) {
  for (int16_t i = 0; i < display.height() / 2; i += 2) {
    display.drawRect(i, i, display.width() - 2 * i, display.height() - 2 * i, SH110X_WHITE);
    display.display();
    delay(1);
  }
}

void testdrawline() {
  for (int16_t i = 0; i < display.width(); i += 4) {
    display.drawLine(0, 0, i, display.height() - 1, SH110X_WHITE);
    display.display();
    delay(1);
  }
  for (int16_t i = 0; i < display.height(); i += 4) {
    display.drawLine(0, 0, display.width() - 1, i, SH110X_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();
  for (int16_t i = 0; i < display.width(); i += 4) {
    display.drawLine(0, display.height() - 1, i, 0, SH110X_WHITE);
    display.display();
    delay(1);
  }
  for (int16_t i = display.height() - 1; i >= 0; i -= 4) {
    display.drawLine(0, display.height() - 1, display.width() - 1, i, SH110X_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();
  for (int16_t i = display.width() - 1; i >= 0; i -= 4) {
    display.drawLine(display.width() - 1, display.height() - 1, i, 0, SH110X_WHITE);
    display.display();
    delay(1);
  }
  for (int16_t i = display.height() - 1; i >= 0; i -= 4) {
    display.drawLine(display.width() - 1, display.height() - 1, 0, i, SH110X_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();
  for (int16_t i = 0; i < display.height(); i += 4) {
    display.drawLine(display.width() - 1, 0, 0, i, SH110X_WHITE);
    display.display();
    delay(1);
  }
  for (int16_t i = 0; i < display.width(); i += 4) {
    display.drawLine(display.width() - 1, 0, i, display.height() - 1, SH110X_WHITE);
    display.display();
    delay(1);
  }
  delay(250);
}
***/
